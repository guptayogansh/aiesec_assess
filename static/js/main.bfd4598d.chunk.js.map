{"version":3,"sources":["Components/CardData.js","App.js","serviceWorker.js","index.js"],"names":["CardData","cardArrayData","newMethod","useState","show","setShow","currentItem","setCurrentItem","location","setLocation","title","setTitle","handleUpdate","handleClose","handleLocation","event","target","value","console","log","handleTitle","handleShow","index","map","cardData","key","Container","CardDeck","style","display","flexDirection","Card","className","border","width","cursor","onClick","bind","Img","variant","src","profile_photo_urls","original","Body","Title","Subtitle","earliest_start_date","duration","Text","branch","organisation","name","Modal","onHide","animation","Header","closeButton","htmlFor","fontWeight","id","type","onChange","Footer","Button","App","state","apiData","setState","slice","fetch","then","res","json","data","catch","this","items","hasMoreItems","setTimeout","height","overflow","pageStart","loadMore","hasMore","loader","useWindow","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfd4598d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Card, Modal, Button, CardDeck,Container} from \"react-bootstrap\";\r\n\r\nconst CardData = ({ cardArrayData, newMethod }) => {\r\n    const [show, setShow] = useState(false);\r\n    const [currentItem, setCurrentItem] = useState(null);\r\n    const [location, setLocation] = useState(\"\");\r\n    const [title, setTitle] = useState(\"\");\r\n\r\n    const handleUpdate = () => {\r\n        newMethod(currentItem, location, title);\r\n        setCurrentItem(null);\r\n        setShow(false);\r\n    };\r\n    const handleClose = () => setShow(false);\r\n\r\n    const handleLocation = event => {\r\n        setLocation(event.target.value);\r\n        console.log(\"in location\");\r\n    };\r\n\r\n    const handleTitle = event => {\r\n        setTitle(event.target.value);\r\n        console.log(\"in title\");\r\n    };\r\n    const handleShow = index => {\r\n        console.log(index);\r\n        setCurrentItem(index);\r\n        setShow(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {cardArrayData.map((cardData, index) => (\r\n                <div key={index}>\r\n                    <Container>\r\n                     <br/>\r\n                    <CardDeck style={{display: 'flex', flexDirection: 'row'}}>\r\n                    <Card\r\n                        className='text-center'\r\n                        border=\"info\"\r\n                        style={{ width: \"23rem\",display:\"flex\", flexDirection:'row', cursor:\"pointer\" }}\r\n                        onClick={handleShow.bind(this, index)}\r\n                    >\r\n                        <Card.Img\r\n                            variant=\"top\"\r\n                            src={cardData.profile_photo_urls.original}\r\n                            style={{width: \"15rem\"}}\r\n                        />\r\n                        <Card.Body>\r\n                            <Card.Title>{cardData.title}</Card.Title>\r\n                            <Card.Subtitle className=\"mb-2 text-muted\">\r\n                                {cardData.location} . {cardData.earliest_start_date} .{\" \"}\r\n                                {cardData.duration + \" weeks\"}\r\n                            </Card.Subtitle>\r\n                            <br />\r\n                            <Card.Text> {cardData.branch.organisation.name}</Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    </CardDeck>\r\n                    <br/><br/>\r\n                    </Container>\r\n                    <Modal show={show} onHide={handleClose} animation={false}>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Edit</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <label htmlFor=\"title\" style={{ fontWeight: \"bold\" }}>\r\n                                Title\r\n                            </label>{\" \"}\r\n                            <br />\r\n                            <input\r\n                                id=\"type\"\r\n                                type=\"text\"\r\n                                name=\"title\"\r\n                                onChange={handleTitle}\r\n                            ></input>{\" \"}\r\n                            <br /> <br />\r\n                            <label htmlFor=\"location\" style={{ fontWeight: \"bold\" }}>\r\n                                Location\r\n                            </label>{\" \"}\r\n                            <br />\r\n                            <input\r\n                                id=\"location\"\r\n                                type=\"text\"\r\n                                name=\"location\"\r\n                                onChange={handleLocation}\r\n                            ></input>{\" \"}\r\n                            <br /> <br />\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" onClick={handleUpdate}>\r\n                                Save Changes\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardData;\r\n","import React, { Component } from 'react';\nimport CardData from './Components/CardData';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nclass App extends Component {\n\n  state = {\n    apiData: {},\n    cardArrayData: []\n  }\n\n\n\n  componentDidMount() {\n\n    fetch('http://api-staging.aiesec.org/v2/opportunities?access_token=dd0df21c8af5d929dff19f74506c4a8153d7acd34306b9761fd4a57cfa1d483c')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ apiData: data })\n        this.setState({ cardArrayData: data.data })\n        console.log(this.state.apiData);\n        console.log(this.state.cardArrayData);\n      })\n      .catch(console.log)\n\n  }\n\n  newMethod = (index, location, title) => {\n    console.log('In new Method')\n    console.log(index);\n    console.log(location);\n    console.log(title);\n    this.setState({\n      cardArrayData: [\n        ...this.state.cardArrayData.slice(0, index),\n        { ...this.state.cardArrayData[index], location, title },\n        ...this.state.cardArrayData.slice(index + 1)\n      ]\n    });\n\n\n  }\n\n  loadMore() {\n    if(this.state.items===200){\n      \n      this.setState({ hasMoreItems: false});\n    }else{\n        setTimeout(() => {\n        this.setState({ items: this.state.items + 20});\n    }, 2000);\n    }\n    \n  }\n\n  render() {\n  \n    return (\n      <div style={{height:700 ,overflow:'auto'}}>\n        <InfiniteScroll\n          pageStart={0}\n          loadMore={this.loadMore.bind(this)}\n          hasMore={true || false}\n          loader={<div className=\"loader\" key={0}>Loading ...</div>}\n          useWindow={false}\n        >\n          <CardData cardArrayData={this.state.cardArrayData} newMethod={this.newMethod} />\n\n         </InfiniteScroll>\n       </div>\n\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}